name: Build Unbound
run-name: ${{ inputs.release == true && 'Release' || 'Build' }} for ${{ inputs.ipa_url }}

on:
  workflow_dispatch:
    inputs:
      ipa_url:
        default: ""
        description: "Direct link to the decrypted ipa"
        required: true
        type: string
      release:
        default: true
        description: "Create a GitHub release"
        type: boolean
      is_testflight:
        default: false
        description: "This is a TestFlight build"
        type: boolean
      add_extensions:
        default: true
        description: "Include extensions (OpenInDiscord & ShareToDiscord)"
        type: boolean
  workflow_call:
    inputs:
      ipa_url:
        default: ""
        type: string
      release:
        default: true
        type: boolean
      is_testflight:
        default: false
        type: boolean
      add_extensions:
        default: true
        type: boolean
      caller_workflow:
        type: string
    outputs:
      deb_url:
        description: "Download URL for the deb package artifact"
        value: ${{ jobs.build-tweak.outputs.deb_url }}
      ipa_url:
        description: "Download URL for the ipa file artifact"
        value: ${{ jobs.build-ipa.outputs.ipa_url }}
      deb_filename:
        description: "Filename of the deb package"
        value: ${{ jobs.build-tweak.outputs.deb_filename }}
      ipa_filename:
        description: "Filename of the ipa file"
        value: ${{ jobs.build-ipa.outputs.ipa_filename }}

permissions:
  contents: write

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  build-tweak:
    runs-on: macos-15
    outputs:
      deb_url: ${{ steps.upload-deb.outputs.artifact-url }}
      deb_filename: ${{ steps.set-deb-filename.outputs.filename }}

    env:
      DEB_DOWNLOADED: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download Tweak
        if: inputs.caller_workflow != 'ci'
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          retry_wait_seconds: 10
          command: |
            set +e

            release_info=$(gh api --header 'Accept: application/vnd.github+json' repos/${{ github.repository }}/releases/latest)
            status_code=$(echo $release_info | jq -r ".status")

            if [ "$status_code" != "null" ]; then
              echo "No releases found or request failed, status code: $status_code"
              echo "DEB_DOWNLOADED=false" >> $GITHUB_ENV
              exit 0
            fi

            set -e

            release_version=$(echo "$release_info" | jq -r '.assets[] | select(.name | contains("iphoneos-arm64.deb")) | .name' | grep -o '_[0-9.]\+_' | tr -d '_')
            control_version=$(grep '^Version:' control | cut -d ' ' -f 2)

            if [ "$release_version" = "$control_version" ]; then
              echo "Versions match. Downloading DEB files..."
              mkdir -p packages
              cd packages
              echo "$release_info" | jq -r '.assets[] | select(.name | endswith("arm64.deb")) | .browser_download_url' | xargs -I {} curl -L -O {}
              echo "DEB_DOWNLOADED=true" >> $GITHUB_ENV
            else
              echo "Versions do not match. No files will be downloaded."
              echo "DEB_DOWNLOADED=false" >> $GITHUB_ENV
              exit 0
            fi

      - name: Check cache
        if: env.DEB_DOWNLOADED == 'false'
        run: echo upstream_heads=`git ls-remote https://github.com/theos/theos | head -n 1 | cut -f 1`-`git ls-remote https://github.com/theos/sdks | head -n 1 | cut -f 1` >> $GITHUB_ENV

      - name: Use cache
        if: env.DEB_DOWNLOADED == 'false'
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/theos
          key: ${{ runner.os }}-${{ env.upstream_heads }}

      - name: Prepare Theos
        if: env.DEB_DOWNLOADED == 'false'
        uses: Randomblock1/theos-action@v1

      - name: Build package
        if: env.DEB_DOWNLOADED == 'false'
        run: gmake package

      - name: Upload rootless package
        id: upload-deb
        uses: actions/upload-artifact@v4
        with:
          name: rootless package
          path: packages/*.deb

      - name: Set deb filename
        id: set-deb-filename
        run: |
          DEB_FILE=$(ls packages/*.deb)
          DEB_FILENAME=$(basename "$DEB_FILE")
          echo "filename=$DEB_FILENAME" >> $GITHUB_OUTPUT

  build-ipa:
    runs-on: macos-15
    needs: build-tweak
    outputs:
      ipa_url: ${{ steps.upload-ipa.outputs.artifact-url }}
      ipa_filename: ${{ steps.set-ipa-filename.outputs.filename }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Download Discord ipa
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 15
          command: curl -L -o discord.ipa ${{ inputs.ipa_url }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          cache: false
          go-version: 'stable'

      - name: Clone patcher
        uses: actions/checkout@v4
        with:
          repository: unbound-app/patcher-ios
          path: patcher-ios

      - name: Build and run patcher
        run: |
          cd patcher-ios
          go build -o patcher
          ./patcher -i ../discord.ipa -o ../patched.ipa

      - name: Update ShareToDiscord Info.plist
        if: inputs.add_extensions == true
        run: |
          INFO_PLIST="extensions/ShareToDiscord/Share/Info.plist"
          /usr/libexec/PlistBuddy -c "Set :URLScheme unbound" "$INFO_PLIST" 2>/dev/null || \
          /usr/libexec/PlistBuddy -c "Add :URLScheme string unbound" "$INFO_PLIST"
          echo "Updated ShareToDiscord Info.plist - Changed URLScheme to 'unbound'"

      - name: Build Extensions
        if: inputs.add_extensions == true
        run: |
          if [ ${{ inputs.is_testflight }} == true ]; then
            SAFARI_EXT_BUNDLE_ID="com.hammerandchisel.discord.testflight.OpenInDiscord"
            SHARE_EXT_BUNDLE_ID="com.hammerandchisel.discord.testflight.Share"
          else
            SAFARI_EXT_BUNDLE_ID="com.hammerandchisel.discord.OpenInDiscord"
            SHARE_EXT_BUNDLE_ID="com.hammerandchisel.discord.Share"
          fi
          
          cd extensions/OpenInDiscord
          xcodebuild build \
            -target "OpenInDiscord Extension" \
            -configuration Release \
            -sdk iphoneos \
            CONFIGURATION_BUILD_DIR="build" \
            PRODUCT_NAME="OpenInDiscord" \
            PRODUCT_BUNDLE_IDENTIFIER="$SAFARI_EXT_BUNDLE_ID" \
            PRODUCT_MODULE_NAME="OpenInDiscordExt" \
            SKIP_INSTALL=NO \
            DEVELOPMENT_TEAM="" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=NO | xcbeautify
          
          cd ../ShareToDiscord
          xcodebuild build \
            -target "Share" \
            -configuration Release \
            -sdk iphoneos \
            CONFIGURATION_BUILD_DIR="build" \
            PRODUCT_NAME="Share" \
            PRODUCT_BUNDLE_IDENTIFIER="$SHARE_EXT_BUNDLE_ID" \
            PRODUCT_MODULE_NAME="Share" \
            SKIP_INSTALL=NO \
            DEVELOPMENT_TEAM="" \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=NO | xcbeautify
          cd ../../

      - name: Extract app name
        run: |
          NAME=$(grep '^Name:' control | cut -d ' ' -f 2)
          echo "APP_NAME=$NAME" >> $GITHUB_ENV

      - name: Install cyan
        run: pip install --force-reinstall https://github.com/asdfzxcvbn/pyzule-rw/archive/main.zip Pillow

      - name: Inject tweak (and extensions)
        run: |
          if [ ${{ inputs.add_extensions }} == true ]; then
            if [ ${{ inputs.is_testflight }} == true ]; then
              cyan -duwsgq -b "com.hammerandchisel.discord.testflight" -i discord.ipa -o ${{ env.APP_NAME }}.ipa -f *.deb extensions/OpenInDiscord/build/OpenInDiscord.appex extensions/ShareToDiscord/build/Share.appex
            else
              cyan -duwsgq -i patched.ipa -o ${{ env.APP_NAME }}.ipa -f *.deb extensions/OpenInDiscord/build/OpenInDiscord.appex extensions/ShareToDiscord/build/Share.appex
            fi
          else
            if [ ${{ inputs.is_testflight }} == true ]; then
              cyan -duwsgq -b "com.hammerandchisel.discord.testflight" -i discord.ipa -o ${{ env.APP_NAME }}.ipa -f *.deb
            else
              cyan -duwsgq -i patched.ipa -o ${{ env.APP_NAME }}.ipa -f *.deb
            fi
          fi

      - name: Upload ipa as artifact
        id: upload-ipa
        uses: actions/upload-artifact@v4
        with:
          name: ipa
          path: ${{ env.APP_NAME }}.ipa

      - name: Set ipa filename
        id: set-ipa-filename
        run: echo "filename=${{ env.APP_NAME }}.ipa" >> $GITHUB_OUTPUT

  release-app:
    if: inputs.caller_workflow != 'ci' && inputs.release == true
    runs-on: macos-15
    needs: build-ipa

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Extract Discord Version
        run: |
          unzip -q *.ipa
          VERSION=$(plutil -p Payload/Discord.app/Info.plist | grep CFBundleShortVersionString | cut -d '"' -f 4)
          
          if [[ ${{ inputs.is_testflight }} == true ]]; then
            BUILD=$(plutil -p Payload/Discord.app/Info.plist | grep CFBundleVersion | cut -d '"' -f 4)
            VERSION="${VERSION}_${BUILD}"
          fi
          
          echo "DISCORD_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.DISCORD_VERSION }}
          files: |
            *.deb
            *.ipa
          generate_release_notes: true
          prerelease: ${{ inputs.is_testflight }}
          fail_on_unmatched_files: true
          token: ${{ env.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  app-repo:
    if: inputs.caller_workflow != 'ci' && inputs.release == true
    continue-on-error: true
    runs-on: macos-15
    needs: release-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download ipa artifact
        uses: actions/download-artifact@v4
        with:
          name: ipa

      - name: Update app-repo.json
        run: |
          APP_FILE=$(ls *.ipa)
          unzip -q "$APP_FILE"
          VERSION=$(plutil -p Payload/Discord.app/Info.plist | grep CFBundleShortVersionString | cut -d '"' -f 4)
          
          if [[ ${{ inputs.is_testflight }} == true ]]; then
            BUILD=$(plutil -p Payload/Discord.app/Info.plist | grep CFBundleVersion | cut -d '"' -f 4)
            VERSION="${VERSION}_${BUILD}"
            APP_INDEX=1
          else
            APP_INDEX=0
          fi
          
          NAME=$(grep '^Name:' control | cut -d ' ' -f 2)
          DATE=$(date -u +"%Y-%m-%d")
          IPA_SIZE=$(stat -f %z "$APP_FILE")
          DOWNLOAD_URL=https://github.com/${{ github.repository }}/releases/download/v$VERSION/$NAME.ipa
          NEW_ENTRY=$(jq -n --arg version "$VERSION" --arg date "$DATE" --arg size "$IPA_SIZE" --arg downloadURL "$DOWNLOAD_URL" '{version: $version, date: $date, size: ($size | tonumber), downloadURL: $downloadURL, localizedDescription: "Further improvements to overall system stability and other minor adjustments have been made to enhance the user experience."}')
          
          VERSION_EXISTS=$(jq --arg version "$VERSION" --argjson index "$APP_INDEX" '.apps[$index].versions | map(select(.version == $version)) | length' app-repo.json)
          if [ "$VERSION_EXISTS" -gt 0 ]; then
            jq --argjson newEntry "$NEW_ENTRY" --argjson index "$APP_INDEX" --arg version "$VERSION" '.apps[$index].versions |= map(if .version == $version then $newEntry else . end)' app-repo.json > temp.json
          else
            jq --argjson newEntry "$NEW_ENTRY" --argjson index "$APP_INDEX" '.apps[$index].versions |= [$newEntry] + .' app-repo.json > temp.json
          fi
          mv temp.json app-repo.json

      - uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          message: "chore: update app-repo.json"
          add: app-repo.json
